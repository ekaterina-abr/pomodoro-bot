"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Airgram = exports.createProviderFactory = void 0;
var core_1 = require("@airgram/core");
var components_1 = require("./components");
exports.createProviderFactory = function (tdJsonClient) {
    return function (handleUpdate) {
        return new components_1.Provider(tdJsonClient, {
            handleUpdate: handleUpdate
        });
    };
};
var Airgram = /** @class */ (function (_super) {
    __extends(Airgram, _super);
    function Airgram(configOrClient, config) {
        var _a;
        var _this = this;
        if (configOrClient instanceof components_1.TdJsonClient && config) {
            _this = _super.call(this, exports.createProviderFactory(configOrClient), config) || this;
        }
        else if (typeof configOrClient === 'object' && 'apiId' in configOrClient) {
            var command = configOrClient.command, models = configOrClient.models, restConfig = __rest(configOrClient, ["command", "models"]);
            if (models) {
                throw new Error('For using models you need to create TdJsonClient manually. See: https://airgram.netlify.app/api-reference/tdjsonclient');
            }
            var tdJsonClient = Airgram.tdJsonClient = (_a = Airgram.tdJsonClient) !== null && _a !== void 0 ? _a : new components_1.TdJsonClient({ command: command });
            if (tdJsonClient.command !== command) {
                throw new Error('The "command" option must have the same value as in active TdJsonClient instance.');
            }
            _this = _super.call(this, exports.createProviderFactory(tdJsonClient), restConfig) || this;
        }
        else {
            throw new Error('Invalid Airgram config.');
        }
        return _this;
    }
    Airgram.tdJsonClient = null;
    return Airgram;
}(core_1.AirgramCore));
exports.Airgram = Airgram;
