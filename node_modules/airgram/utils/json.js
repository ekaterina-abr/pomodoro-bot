"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSerializer = exports.createDeserializer = exports.snakeCase = exports.camelCase = void 0;
function camelCase(str) {
    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, function (_m, chr) { return chr.toUpperCase(); });
}
exports.camelCase = camelCase;
function snakeCase(str) {
    return str.replace(/[A-Z]/g, function (chr) { return "_" + chr.toLowerCase(); });
}
exports.snakeCase = snakeCase;
var keyMap = new Map();
function createDeserializer(models) {
    return function (_key, value) {
        if (value && typeof value === 'object' && !Array.isArray(value)) {
            var replacement = {};
            for (var k in value) {
                // console.info('unserialize', k)
                if (Object.hasOwnProperty.call(value, k)) {
                    if (k === '@type') {
                        replacement._ = value['@type'];
                        continue;
                    }
                    if (!k) {
                        continue;
                    }
                    if (k.charAt(0) === '@') {
                        replacement[k] = value[k];
                        continue;
                    }
                    var key = keyMap.get(k);
                    if (key == null) {
                        key = camelCase(k);
                        keyMap.set(k, key);
                    }
                    replacement[key] = value[k];
                }
            }
            return models ? models(replacement) : replacement;
        }
        return value;
    };
}
exports.createDeserializer = createDeserializer;
function createSerializer() {
    return function (_key, value) {
        if (value && typeof value === 'object' && !Array.isArray(value)) {
            var replacement = {};
            for (var k in value) {
                if (Object.hasOwnProperty.call(value, k)) {
                    if (k === '_') {
                        replacement['@type'] = value._;
                        continue;
                    }
                    if (!k) {
                        continue;
                    }
                    if (k.charAt(0) === '@') {
                        replacement[k] = value[k];
                        continue;
                    }
                    var key = keyMap.get(k);
                    if (key == null) {
                        key = snakeCase(k);
                        keyMap.set(k, key);
                    }
                    replacement[key] = value[k];
                }
            }
            return replacement;
        }
        return value;
    };
}
exports.createSerializer = createSerializer;
