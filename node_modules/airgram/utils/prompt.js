"use strict";
// tslint:disable:object-literal-sort-keys
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prompt = void 0;
var readline = __importStar(require("readline"));
var prev = null;
function prompt(question, fn) {
    return new Promise(function (resolve, reject) {
        if (prev) {
            prev.reject(new Error('Readline seance has been closed due initialization of the new seance.'));
        }
        var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        prev = {
            resolve: function (value) {
                prev = null;
                rl.close();
                resolve(value);
            },
            reject: function (error) {
                prev = null;
                rl.close();
                reject(error);
            }
        };
        rl.question(question + "\n", function (value) {
            prev = null;
            rl.close();
            resolve(value);
        });
        if (typeof fn === 'function') {
            fn(prev);
        }
    });
}
exports.prompt = prompt;
