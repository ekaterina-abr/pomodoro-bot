"use strict";
/* eslint-disable @typescript-eslint/camelcase,@typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TdJsonClient = void 0;
var ffi = __importStar(require("ffi-napi"));
var path_1 = require("path");
var ref = __importStar(require("ref-napi"));
var utils_1 = require("../utils");
var DEFAULT_COMMAND = process.platform === 'win32' ? 'tdjson' : 'libtdjson';
function buildQuery(query) {
    var buffer = Buffer.from(query + '\0', 'utf-8');
    buffer.type = ref.types.CString;
    return buffer;
}
var TdJsonClient = /** @class */ (function () {
    function TdJsonClient(_a) {
        var command = _a.command, models = _a.models, timeout = _a.timeout;
        this.destroyed = false;
        this.pending = new Map();
        this.sleepPromise = null;
        this.stack = new Map();
        this.updateHandlers = new Map();
        this.wakeup = null;
        this.command = command || DEFAULT_COMMAND;
        this.timeout = timeout || 10;
        this.serialize = utils_1.createSerializer();
        this.deserialize = utils_1.createDeserializer(models);
        this.handleError = function (error) {
            throw error;
        };
        this.client = ffi.Library(path_1.resolve(this.command), {
            td_create_client: ['int', []],
            td_send: ['void', ['int', 'string']],
            td_receive: ['string', ['double']],
            td_execute: ['string', ['string']]
        });
        this.loop();
    }
    TdJsonClient.prototype.addUpdateHandler = function (clientId, fn) {
        this.updateHandlers.set(clientId, fn);
    };
    TdJsonClient.prototype.catch = function (handler) {
        this.handleError = handler;
    };
    TdJsonClient.prototype.create = function () {
        return this.client.td_create_client();
    };
    TdJsonClient.prototype.destroy = function () {
        this.pending.clear();
        this.sleepPromise = null;
        this.wakeup = null;
        this.destroyed = true;
    };
    TdJsonClient.prototype.execute = function (query) {
        return this.parseResponse(this.client.td_execute(buildQuery(JSON.stringify(query, this.serialize))));
    };
    TdJsonClient.prototype.pause = function () {
        var _this = this;
        if (!this.wakeup) {
            this.sleepPromise = new Promise(function (resolve) {
                _this.wakeup = resolve;
            });
        }
    };
    TdJsonClient.prototype.removeUpdateHandler = function (clientId) {
        this.updateHandlers.delete(clientId);
        this.pending.delete(clientId);
        this.stack.delete(clientId);
    };
    TdJsonClient.prototype.resume = function () {
        if (this.wakeup && !this.destroyed) {
            this.wakeup();
            this.sleepPromise = null;
            this.wakeup = null;
        }
    };
    TdJsonClient.prototype.send = function (clientId, id, request, resolve) {
        if (!this.destroyed) {
            var clientHandlers = this.getClientHandlers(clientId);
            clientHandlers.set(id, resolve);
            this.client.td_send(clientId, buildQuery(JSON.stringify(request, this.serialize)));
        }
    };
    TdJsonClient.prototype.addToStack = function (response) {
        if (response) {
            var clientId = Number(response['@client_id']);
            var clientStack = this.getClientStack(clientId);
            clientStack.push(response);
            if (clientStack.length === 1) {
                this.handleResponse(clientId).catch(this.handleError);
            }
        }
    };
    TdJsonClient.prototype.getClientHandlers = function (clientId) {
        var clientHandlers = this.pending.get(clientId);
        if (!clientHandlers) {
            clientHandlers = new Map();
            this.pending.set(clientId, clientHandlers);
        }
        return clientHandlers;
    };
    TdJsonClient.prototype.getClientStack = function (clientId) {
        var clientStack = this.stack.get(clientId);
        if (!clientStack) {
            clientStack = [];
            this.stack.set(clientId, clientStack);
        }
        return clientStack;
    };
    TdJsonClient.prototype.handleResponse = function (clientId) {
        return __awaiter(this, void 0, void 0, function () {
            var clientStack, response, requestId, clientHandlers, resolve;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clientStack = this.getClientStack(clientId);
                        response = clientStack.shift();
                        if (!response) {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        requestId = response['@extra'];
                        delete response['@client_id'];
                        delete response['@extra'];
                        if (!requestId) return [3 /*break*/, 1];
                        clientHandlers = this.getClientHandlers(clientId);
                        resolve = clientHandlers.get(requestId);
                        clientHandlers.delete(requestId);
                        if (resolve) {
                            resolve(response);
                        }
                        else {
                            this.handleError(new Error("[TdProxy] request handler for the client " + clientId + " not found. Missed update: " + JSON.stringify(response)));
                        }
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.handleUpdate(clientId, response)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        setImmediate(function () { return _this.handleResponse(clientId); });
                        return [2 /*return*/];
                }
            });
        });
    };
    TdJsonClient.prototype.handleUpdate = function (clientId, response) {
        return __awaiter(this, void 0, void 0, function () {
            var handler;
            return __generator(this, function (_a) {
                handler = this.updateHandlers.get(clientId);
                if (handler) {
                    return [2 /*return*/, handler(response)];
                }
                else {
                    this.handleError(new Error("[TdProxy] updates handler for the client " + clientId + " not found. Missed update: " + JSON.stringify(response)));
                }
                return [2 /*return*/];
            });
        });
    };
    TdJsonClient.prototype.loop = function () {
        var _this = this;
        if (this.destroyed) {
            return;
        }
        if (this.sleepPromise) {
            this.sleepPromise.then(function () {
                _this.receive();
            });
        }
        else {
            this.receive();
        }
    };
    TdJsonClient.prototype.onReceive = function (response) {
        var _this = this;
        if (response) {
            this.addToStack(response);
        }
        setImmediate(function () { return _this.loop(); });
    };
    TdJsonClient.prototype.parseResponse = function (data) {
        try {
            if (data === null) {
                return null;
            }
            return JSON.parse(data, this.deserialize);
        }
        catch (e) {
            this.handleError(new Error('[TdProxy] received invalid JSON'));
            return null;
        }
    };
    TdJsonClient.prototype.receive = function () {
        var _this = this;
        if (this.destroyed) {
            return;
        }
        this.client.td_receive.async(this.timeout, function (error, response) {
            if (error) {
                _this.handleError(new Error("[TdProxy] TDLib error: " + error));
                return _this.onReceive(null);
            }
            var tdObject = _this.parseResponse(response);
            _this.onReceive(tdObject);
        });
    };
    return TdJsonClient;
}());
exports.TdJsonClient = TdJsonClient;
